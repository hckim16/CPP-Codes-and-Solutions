#include <iostream>
#include <queue>


using namespace std;

struct tree{
    int value;
    tree *left;
    tree *right;
};

struct node{
    int key;
    node *next;
};
node *head;
node *current;

//create root

struct tree *createRoot(int v){
    struct tree *temp = new tree;
    temp-> value = v;
    temp-> left = temp-> right = NULL;
    return temp;
}

//create tree

struct tree *createTree(struct tree *root, int v){
    
    if(root == NULL)
        return createRoot(v);
    else if(v <= root-> value)
        root-> left = createTree(root-> left, v);
    else
        root-> right = createTree(root-> right, v);
    return root;
}

void preorder(tree *root){
    if(root != NULL){
        cout << root-> value << " ";
        preorder(root-> left);
        preorder(root-> right);
    }
}

void postorder(tree *root){
    if(root != NULL){
        postorder(root-> left);
        postorder(root-> right);
        cout << root-> value << " ";
    }
}

void inorder(tree *root){
    if(root != NULL){
        inorder(root-> left);
        cout << root-> value << " ";
        inorder(root-> right);
    }
}

void levelorder(tree *root){
    if(root == NULL)
        return;
    queue<tree *> q1;
    q1.push(root);
    unsigned long level = 0;
    while(!q1.empty()){
        level = q1.size();
        if(level == 0)
            break;
        while(level > 0){
            tree *temp = q1.front();
            cout << temp-> value << " ";
            if(temp-> left != NULL)
                q1.push(temp-> left);
            if(temp-> right != NULL)
                q1.push(temp-> right);
            q1.pop();
            level--;
        }
        cout << endl;
    }
}

/*
deque<Node*> treeQueue;

void levelOrder(Node* root){
    if( root ){
        treeQueue.push_back(root);
    }
    while( !treeQueue.empty() ){  
        Node* tree = treeQueue.front();
        treeQueue.pop_front();

        cout << tree->data << " ";

        if( tree->left ){
            treeQueue.push_back( tree->left );
        }
        if( tree->right ){
            treeQueue.push_back( tree->right );
        }
    }
}
*/

void addNode(struct node **head, int k){
    node *temp = new node;
    temp-> key = k;
    temp-> next = *head;
    *head = temp;
}

void insertBack(int k){
    node *temp = new node;
    temp-> next = NULL;
    temp-> key = k;
    if(head != NULL ){
        current = head;
        while(current-> next != NULL){
            current = current-> next;
        }
        current-> next = temp;
    }
    else
        head = temp;
}

void display(){
    current = head;
    while(current != NULL){
        cout << current-> key << "->";
        current = current-> next;
    }
    cout << "end" << endl;
}

int main(){
    int arr[8] = {5,3,7,2,4,6,8};
    struct tree *parent = NULL;
    parent = createRoot(arr[0]);
    for(int i = 1; i < 7; i++){
        createTree(parent, arr[i]);
    }
    cout << "Preorder sequence is: ";
    preorder(parent);
    cout << endl;
    cout << "Postorder sequence is: ";
    postorder(parent);
    cout << endl;
    cout << "Inorder sequence is: ";
    inorder(parent);
    cout << endl;
    cout << "Level order sequence by depth: " << endl;
    levelorder(parent);
    cout << endl;
    
    /*
    struct node *head = NULL;
    addNode(&head, 4);
    insertBack(1);
    insertBack(3);
    insertBack(7);
    insertBack(9);
    cout << "Linklist order is: ";
    display();
    cout << endl;
    */
    
    return 0;
}

/*
Preorder sequence is: 5 3 2 4 7 6 8 
Postorder sequence is: 2 4 3 6 8 7 5 
Inorder sequence is: 2 3 4 5 6 7 8 
Level order sequence by depth: 
5 
3 7 
2 4 6 8 

Program ended with exit code: 0
*/
